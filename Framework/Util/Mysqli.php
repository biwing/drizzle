<?php
/**
 * @author  qibing
 *
 * mysqli的封装
 */

class Util_Mysqli
{
    const MYSQL_CHARSET_LATIN1  = 'latin1';
    const MYSQL_CHARSET_GBK     = 'gbk';
    const MYSQL_CHARSET_UTF8    = 'utf8';

    private static $_links = array();
    private static $_pingSwitch = true; // 默认是开启的，在执行操作之前会ping一下server.

    /**
     * 建立mysqli连接
     * @param  [type]  $host     [description]
     * @param  [type]  $username [description]
     * @param  [type]  $password [description]
     * @param  [type]  $dbname   [description]
     * @param  integer $port     [description]
     * @param  [type]  $encoding [description]
     * @return mysqli/bool            成功返回mysqli对象，失败返回false
     */
    public static function connect($host, $username, $password, $dbname, $port = 3306, $encoding = self::MYSQL_CHARSET_UTF8)
    {
        try
        {
            $linkKey = md5(implode('_', array($host, $username, $password, $dbname, $port, $encoding)));
            if (isset(self::$_links[$linkKey]) && self::_ping(self::$_links[$linkKey]))
            {
                return self::$_links[$linkKey];
            }

            $link = new mysqli($host, $username, $password, $dbname, $port);
            if ($link->connect_errno)
            {
                Tool_Log::error(sprintf('Mysqli connect error. errno: %d. error: %s.', $link->connect_errno, $link->connect_error));
                return false;
            }

            if (!$link->set_charset($encoding))
            {
                Tool_Log::error('Mysqli set_charset fail.');
                $link->close();
                return false;
            }

            self::$_links[$linkKey] = $link;
            return $link;
        }
        catch (Exception $e)
        {
            Tool_Log::error(sprintf('Mysqli connect exception. code: %d. message: %s.', $e->getCode(), $e->getMessage()));
        }
        return false;
    }

    /**
     * 关闭连接
     * @param  [type] $link [description]
     * @return void
     */
    public static function close($link)
    {
        if (!self::_ping($link))
        {
            return;
        }

        foreach (self::$_links as $key => $tmpLink)
        {
            if ($tmpLink->thread_id == $link->thread_id)
            {
                unset(self::$_links[$key]);
            }
        }

        $link->close();
    }

    /**
     * Checks whether the connection to the server is working. If it has gone down, and global option mysqli.reconnect is enabled an automatic reconnection is attempted. 
     * @param  mysqli $link
     * @return bool       
     */
    private static function _ping($link)
    {
        if (!is_object($link))
        {
            return false;
        }

        if (self::$_pingSwitch && method_exists($link, 'ping'))
        {
            return $link->ping();
        }

        return true;
    }

    /**
     * DML queries:  INSERT, UPDATE, REPLACE  or DELETE
     * @param  [type] $link [description]
     * @param  [type] $sql  [description]
     * @return boolean      是否执行成功。成功之后你可能还需要调用getLastInsertId或getLastAffectedRows
     */
    public static function execute($link, $sql)
    {
        if (!self::_ping($link))
        {
            return false;
        }

        if ($link->query($sql))
        {
            return true;
        }

        Tool_Log::error(sprintf('Mysqli execute fail. sql: %s. %s', $sql, self::getLastErrorInfo($link)));
        return false;
    }

    /**
     * 获取最后一次query(INSERT)所影响的id
     *  returns the ID generated by a query on a table with a column having the AUTO_INCREMENT attribute. If the last query wasn't an INSERT or UPDATE statement or if the modified table does not have a column with the AUTO_INCREMENT attribute, this function will return zero. 
     * @param  [type] $link [description]
     * @return int
     */
    public static function getLastInsertId($link)
    {
        return $link->insert_id;
    }

    /**
     * 获取最后一次操作所影响的行数
     * Returns the number of rows affected by the last INSERT, UPDATE, REPLACE or DELETE query. 
     * @param  [type] $link [description]
     * @return int
     */
    public static function getLastAffectedRows($link)
    {
        return $link->affected_rows;
    }

    /**
     * 执行查询(SELECT, SHOW, DESCRIBE或 EXPLAIN查询)
     * @param  [type] $link [description]
     * @param  [type] $sql  [description]
     * @return bool  失败返回false, 成功时若是SELECT, SHOW, DESCRIBE或 EXPLAIN查询则返回结果，否则返回true
     */
    public static function query($link, $sql)
    {
        if (!self::_ping($link))
        {
            return false;
        }

        $result = $link->query($sql);
        if ($result == false)
        {
            Tool_Log::error(sprintf('Mysqli query fail. sql: %s. %s', $sql, self::getLastErrorInfo($link)));
            return false;
        }

        if ($result instanceof mysqli_result)
        {
            $ret = array();
            while($row = $result->fetch_assoc())
            {
                $ret[] = $row;
            }
            $result->free();
            return $ret;
        }

        return true;
    }

    /**
     * 获取最后操作的错误信息
     * @param  [type] $link [description]
     * @return string/bool 返回错误描述，如果没有错误返回false 
     */
    public static function getLastErrorInfo($link)
    {
        if ($link->errno)
        {
            return sprintf('errno: %d. error: %s.', $link->errno, $link->error);
        }
        return false;
    }

    /**
     * 设置autocommit开关
     * @param mysqli $link [description]
     * @param bool $mode [description]
     * @return  bool 是否成功
     */
    public static function autoCommit($link, $mode)
    {
        return self::_ping($link) && $link->autocommit((boolean)$mode);
    }

    public static function beginTransaction($link)
    {
        return self::_ping($link) && $link->begin_transaction();
    }

    public static function commit($link)
    {
        return self::_ping($link) && $link->commit();
    }

    public static function rollback($link)
    {
        return self::_ping($link) && $link->rollback();
    }

    /**
     * 设置ping开关
     * @param boolean $s [description]
     */
    public static function setPingSwitch($s = false)
    {
        self::$_pingSwitch = (boolean)$s;
    }
}